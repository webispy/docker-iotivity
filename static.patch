diff --git a/extlibs/mbedtls/SConscript b/extlibs/mbedtls/SConscript
index cf350db..0832782 100644
--- a/extlibs/mbedtls/SConscript
+++ b/extlibs/mbedtls/SConscript
@@ -94,7 +94,8 @@ if not found:
     if os.path.exists('.git/HEAD'):
         # Apply ocf patch on git revision
         print("Syncing/patching mbedtls external project...")
-        cmd = 'git checkout -f development && git reset --hard ' + mbedtls_revision + ' && git clean -f && git apply --whitespace=fix ../ocf.patch'
+        # cmd = 'git checkout -f development && git reset --hard ' + mbedtls_revision + ' && git clean -f && git apply --whitespace=fix ../ocf.patch'
+        cmd = 'git apply --whitespace=fix ../ocf.patch'
         res = os.system(cmd)
     else:
         # Fallback to regular patch command
@@ -220,12 +221,15 @@ mbeX509_src = [
 mbedcrypto_env = mbedtls_env.Clone()
 static_libmbedcrypto = mbedcrypto_env.StaticLibrary('mbedcrypto', mbedcrypto_src)
 mbedcrypto_env.InstallTarget(static_libmbedcrypto, 'mbedcrypto')
+mbedcrypto_env.UserInstallTargetLib(static_libmbedcrypto, 'mbedcrypto')
 
 mbex509_env = mbedtls_env.Clone()
 mbex509_env.AppendUnique(LIBS=['mbedcrypto'])
 static_libmbedx509 = mbex509_env.StaticLibrary('mbedx509', mbeX509_src)
 mbex509_env.InstallTarget(static_libmbedx509, 'mbedx509')
+mbex509_env.UserInstallTargetLib(static_libmbedx509, 'mbedx509')
 
 mbedtls_env.AppendUnique(LIBS=['mbedx509', 'mbedcrypto'])
 static_libmbedtls = mbedtls_env.StaticLibrary('mbedtls', mbedtls_src)
 mbedtls_env.InstallTarget(static_libmbedtls, 'mbedtls')
+mbedtls_env.UserInstallTargetLib(static_libmbedtls, 'mbedtls')
diff --git a/resource/csdk/connectivity/src/SConscript b/resource/csdk/connectivity/src/SConscript
index 9696ea7..4b93f4a 100644
--- a/resource/csdk/connectivity/src/SConscript
+++ b/resource/csdk/connectivity/src/SConscript
@@ -184,3 +184,11 @@ elif ca_os not in ['msys_nt', 'windows']:
 
 connectivity_env.InstallTarget(calib, 'connectivity_abstraction')
 connectivity_env.UserInstallTargetLib(calib, 'connectivity_abstraction')
+connectivity_env.UserInstallTargetHeader(
+    '../api/cacommon.h', 'resource', 'cacommon.h')
+connectivity_env.UserInstallTargetHeader(
+    '../api/cainterface.h', 'resource', 'cainterface.h')
+connectivity_env.UserInstallTargetHeader(
+    '../api/casecurityinterface.h', 'resource', 'casecurityinterface.h')
+connectivity_env.UserInstallTargetHeader(
+    '../api/cautilinterface.h', 'resource', 'cautilinterface.h')
diff --git a/resource/csdk/logger/SConscript b/resource/csdk/logger/SConscript
index 64c37b2..9c5ad74 100644
--- a/resource/csdk/logger/SConscript
+++ b/resource/csdk/logger/SConscript
@@ -39,6 +39,7 @@ else:
 
 loggerlib = local_env.StaticLibrary('logger', logger_src)
 local_env.InstallTarget(loggerlib, 'logger')
+local_env.UserInstallTargetLib(loggerlib, 'logger')
 local_env.UserInstallTargetHeader('include/experimental/logger_types.h', 
                                   'c_common/experimental', 'logger_types.h')
 local_env.UserInstallTargetHeader('include/experimental/logger.h',
diff --git a/resource/csdk/routing/SConscript b/resource/csdk/routing/SConscript
index 1688064..8ce687c 100644
--- a/resource/csdk/routing/SConscript
+++ b/resource/csdk/routing/SConscript
@@ -57,4 +57,5 @@ elif env.get('ROUTING') == 'EP':
 
 routinglib = local_env.StaticLibrary('routingmanager', routing_src)
 local_env.InstallTarget(routinglib, 'routingmanager')
+local_env.UserInstallTargetLib(routinglib, 'routingmanager')
 
diff --git a/resource/csdk/security/SConscript b/resource/csdk/security/SConscript
index 2daa1ae..55d6d74 100644
--- a/resource/csdk/security/SConscript
+++ b/resource/csdk/security/SConscript
@@ -147,6 +147,25 @@ if target_os in ['arduino']:
 libocsrm = libocsrm_env.StaticLibrary('ocsrm', libocsrm_src)
 
 libocsrm_env.InstallTarget(libocsrm, 'ocsrm')
+libocsrm_env.UserInstallTargetLib(libocsrm, 'ocsrm')
 libocsrm_env.UserInstallTargetHeader(
     'include/experimental/securevirtualresourcetypes.h',
     'resource/stack/experimental', 'securevirtualresourcetypes.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/base64.h', 'resource/stack', 'base64.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/iotvticalendar.h', 'resource/stack', 'iotvticalendar.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/occertutility.h', 'resource/stack', 'occertutility.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/ocsecurity.h', 'resource/stack', 'ocsecurity.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/oxmverifycommon.h', 'resource/stack', 'oxmverifycommon.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/pbkdf2.h', 'resource/stack', 'pbkdf2.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/pinoxmcommon.h', 'resource/stack', 'pinoxmcommon.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/pkix_interface.h', 'resource/stack', 'pkix_interface.h')
+libocsrm_env.UserInstallTargetHeader(
+    'include/srmutility.h', 'resource/stack', 'srmutility.h')
diff --git a/resource/csdk/security/tool/SConscript b/resource/csdk/security/tool/SConscript
index d8d073c..41515c9 100644
--- a/resource/csdk/security/tool/SConscript
+++ b/resource/csdk/security/tool/SConscript
@@ -100,3 +100,6 @@ svrdbeditor_src = [
 svrdbeditor = tools_env.Program("svrdbeditor", svrdbeditor_src)
 Alias("securitytool", [json2cbor, svrdbeditor])
 tools_env.AppendTarget('securitytool')
+
+tools_env.UserInstallTargetBin(json2cbor)
+tools_env.UserInstallTargetBin(svrdbeditor)
diff --git a/service/SConscript b/service/SConscript
index ddb3075..d58da0a 100755
--- a/service/SConscript
+++ b/service/SConscript
@@ -26,7 +26,7 @@ Import('env')
 
 target_os = env.get('TARGET_OS')
 
-if target_os not in ['arduino', 'darwin', 'windows']:
+if target_os not in ['arduino', 'darwin', 'windows', 'linux']:
     # Build resource-encapsulation project
     SConscript('resource-encapsulation/SConscript')
 
@@ -50,5 +50,5 @@ if target_os not in ['arduino', 'darwin', 'windows']:
         SConscript('coap-http-proxy/SConscript')
 
 # Build EasySetup module
-if target_os in ['arduino', 'android', 'ios', 'linux', 'tizen']:
+if target_os in ['arduino', 'android', 'ios', 'tizen']:
     SConscript('easy-setup/SConscript')
